== Using DP ==
* problem description: checking total number of subarray or max size, which sum/prod/divide equals to/less than/more than K
* analysis: if need to find out all the subarray satisfy a requirement - sum/prod/dividible to K, and record appearance of such subarries,
we need a extra structure to record it. Using a map to map from its sum/prod to times or index. 
By using such structure, we can check on the way to see if there is an answer exist, and add up to final result.
* algorithm:
loop(i=0:n):
  sum += arr[i]
  checking(map[sum-k]) and add up tp final results
  record(map[sum])
  
== sliding window ==
* by scan array items once by using two pointer: one to left most, one to right most; during the way, analyze the results so far, sum up
or adjust for the final results
* algorithm exmaple: final prod of subarries < k
int numSubarrayProductLessThanK(vector<int>& nums, int k) {
        if (k <= 1) return 0;
        int prod = 1, ans = 0, left = 0;
        for (int right = 0; right < nums.size(); right++) {
            prod *= nums[right];
            while (prod >= k) prod /= nums[left++];
            ans += right - left + 1;
        }
        return ans;
}


  
